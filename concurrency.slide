Alternative Concurrency Models: From Hello World to Halo

Charles Cochrane

Websphere Liberty Team
Go, Java and Ruby lover

github.com/Charlesworth

* Why bother with Concurrency?

	The Free Lunch Is Over,
	the biggest sea change in software development since the OO revolution
	is knocking at the door, and its name is Concurrency.

	- Herb Sutter

Processors arn't getting much faster, they're getting more cores.

* So what is Concurrency and Parallelism

Lets start with a simple example: Watching TV while playing Angry Birds

* Procedural

	I have to watch some TV before I can play Angry Birds

The watch TV operation is blocking me playing Angry Birds, so this is _Synchronus_ task.

* Concurrent

	I will watch TV, but during the adverts I can play Angry Birds

I am managing two seperate tasks here that are independant, so this is _Asynchronus_.

However I am not executing both tasks at the same time, I am _Interleaving_ between them.

* Parallel

	I can watch TV while I'm playing Angry Birds

This example is an _Asynchronus_ again, as the 2 tasks are not blocking each other.

This time I'm executing more than one task at the same time, in _Parrallel_.

* Distributed

	I'll watch the TV while you finish this level on Angry Birds

This example is _Asynchronus_ and _Parrallel_ on non-cohabitating processors!

* The right tool for the right job

There is no universal "best" way to do concurrency or parrallelism,
so lets look at some popular models and when they fit.

* The ol ' fasioned way: Threading

.image ./threading.jpg

* Common and most popular method

All of the most popular langauges offer threads and locks for concurrent programming as standard.

* Threading on multiple cores

.image ./threads.png _ 700

* Problems with threading

There is lots to think about and many potential problems:

- Data Races
- Deadlocks
- Priority Inversion
- Heavily Contended Locks
- Hard to safely modify the application
- ...

_Lets_look_at_some_different_models_

* The Actor Model

.image ./actors.jpg

* The Actor Model

Instead of Objects, you have Actors.

Actors can only communicate through messages and each has its own buffered mailbox.

When an Actor recieves a message it can
- perform a function
- create more actors
- send more messages


_Real_Life_Analogy:_People_cooperating_by_sending_mail_to_one_other._

* The Actor Model

.image ./ActorModel.png

* Actors in practice: Halo 4 Backend

Halo 4 and upcoming Halo 5 uses the Actor model for game and player stats.

It uses the opensource Oreals framework
.link https://github.com/dotnet/Orleans github.com/dotnet/Orleans

_For_some_reason_they_call_Actors_Grains_and_machines_silos_

* Halo 4 Backend

.image ./Halo1.png _ 800

* Halo 4 Backend

.image ./Halo2.png _ 600

* Halo 4 Backend

.image ./Halo3.png _ 600

* Halo 4 Backend

.image ./Halo4.png _ 600

* Actor Benifits

High level of abstraction

No shared state means easy to avoid:
- Race conditions
- Deadlocks
- Heavily Contended Locks

Easy to distribute

_Usualy_ single-threaded, so easier to program

* But its not all roses

- Shared state is often required
- Synchronous behavior is often required
- Buffered mailboxes can be memory expensive

_Lets_try_another_model_

* CSP (Communicating Sequential Processes)

.image ./phone.jpg _ 600

* CSP (Communicating Sequential Processes)

Actor model with no mailbox buffer. Sender and Reciever are blocked until both are ready.

- Still uses messaging to share state, through a _Channel_
- Message passing naturaly synchronises threads

_Real_Life_Analogy:_People_phoning_each_other_(with_no_answer_machine)_

* Example: Go Routines

.play csp.go /^var/,/^func helloWorld/,/^}/

* Example 2: Go Routines

.play csp2.go /^func ping/,/^func pong/,/^}/

* CSP in practice

dl.google.com serves Google downloads and is written completly in Go.

.link https://talks.golang.org/2013/oscon-dl.slide

* There are many more interesting models!

* Try it yourself: Languages and Libraries

*Actors*

.link http://akka.io/ Java Akka - The most popular Java actor Library
.link http://www.paralleluniverse.co/quasar/ Java Quasar - Library for both CSP and Actors
.link http://www.scala-lang.org/ Scala - Actors are part of language
.link https://github.com/dotnet/orleans Orleans - .NET framework used for Halo
.link http://www.erlang.org/ Erlang - Actors are in the standard libraries

*CSP*

.link https://golang.org/ The Go Language - Built in concurrency with the CSP model (and my favorite)
.link http://www.paralleluniverse.co/quasar/ Java Quasar Library - Library for both CSP and Actors
.link https://github.com/clojure/core.async/ Clojure core.async - Library adding CSP functionality
.link https://github.com/rssh/scala-gopher Scala-gopher Library - CSP implementation in Scala

* Learn More:

.link https://www.youtube.com/watch?v=cN_DpYBzKso  Rob Pike - Concurrency Is Not Parallelism
.link https://www.youtube.com/watch?v=f6kdp27TYZs Rob Pike - Go Concurrency Patterns
.link https://www.youtube.com/watch?v=dGVqrGmwOAw Rich Hickey - Clojure Concurrency
.link http://www.amazon.co.uk/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653 Book - Seven Concurrency Models in Seven Weeks

* Thanks for listening
If you take anything away today: *I*will*try*out*some*concurrent*programming!*

Find me after the talk if you have any questions :)
