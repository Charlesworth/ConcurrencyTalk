Alternative Concurrency Models: From Hello World to Halo

Charles Cochrane
Liberty Cloud Team
Go, Java and Ruby lover

github.com/charlesworth

* Why bother with Concurrency?
		
	The Free Lunch Is Over,
	the biggest sea change in software development since the OO revolution
	is knocking at the door, and its name is Concurrency.

	- Herb Sutter

Processors arn't getting much faster, there getting more cores.

* So what is Concurrency and Parallelism

Lets start with a simple example: Watching TV while playing Angry Birds

* Procedural

	I can only focus on the TV or Angry Birds, so will pick one

The watch TV operation is blocking me playing Angry Birds, so this is _Synchronus_ task.

* Concurrent

	I will watch TV, but during the adverts I can play Angry Birds

I am managing two seperate tasks here, so this is _Asynchronus_.

However I am not executing both tasks at the same time, this is _Interleaving_.

* Parallel

	I can watch TV while I'm playing Angry Birds

This example is an _Asynchronus_ again, as the 2 tasks are not blocking each other.

This time I'm executing more than one task at the same time, in _Parrallel_.

* Distributed

	I'll watch the TV while you finish this level on Angry Birds

This example is _Asynchronus_ and _Parrallel_ on non-cohabitating processors!

* The right tool for the right job

Great for blocking operations where asynchronicity is key

Great for massive problems where splitting into sub-tasks could simplify

* Threading....

* A single core with a single thread

.image ./proc1.jpg

* A single core with multiple threads.....

.image ./proc3.jpg

* ...is actualy Interleaving

.image ./proc2.jpg

The work is _nondeterministic_; You don't know execution order. 

* Threading on multiple cores

.image ./proc4.jpg

Its very unlikely that this will ever be the case! 

* Problems with threading

There is lots to think about and many potential problems:

- Data Races
- Deadlocks
- Priority Inversion
- Heavily Contended Locks
- ...

_Lets_look_at_some_different_models_

* The Actor Model

.image ./actors.jpg

* The Actor Model

Instead of Objects, you have Actors.

Actors can only communicate through messages and each has its own mail box.

When an Actor recieves a message it can
- perform a function
- create more actors 
- send more messages

* The Actor Model

.image ./ActorModel.png

* EXAMPLE: Akka, a popular Java Actor framework

	package sample.hello;

	import akka.actor.Props;
	import akka.actor.UntypedActor;
	import akka.actor.ActorRef;

	public class HelloWorld extends UntypedActor {

	  @Override
	  public void preStart() {
	    // create the greeter actor
	    final ActorRef greeter = getContext().actorOf(Props.create(Greeter.class), "greeter");
	    // tell it to perform the greeting
	    greeter.tell(Greeter.Msg.GREET, getSelf());
	  }

	  @Override
	  public void onReceive(Object msg) {
	    if (msg == Greeter.Msg.DONE) {
	      // when the greeter is done, stop this actor and with it the application
	      getContext().stop(getSelf());
	    } else
	      unhandled(msg);
	  }
	}

* Actor pros and cons

http://www.slideshare.net/drorbr/the-actor-model-towards-better-concurrency

* Actors in practice: Halo Backend

* Code

Here's a test for you, just main:

.play test.go /func setProc/,

* Quotes:

Quote this:

  We wouldn't even be having this discussion if thread local storage wasn't useful. But every 
  feature comes at a cost, and in my opinion the cost of threadlocals far outweighs their benefits. 
  They're just not a good fit for Go.

  - Andrew Gerrand

Nice quote there

* Who is this guy?
- Programming addict
- C, Java, Ruby, Go
- Director, JoshSoftware
.link http://www.joshsoftware.com/team The JoshSoftware team

* My Prediction
- 1995 Java - at the time, people in India only knew the "Jawa" motorcycle!
- 2005 Ruby - at the time, only Reevik Technologies (now defunct) had started work with Ruby in Pune.
- 2015 Go - JoshSoftware is already into Go!

.image ./test.jpg

* The next decade belongs to Go

In the 1970s, Fortran and Cobol where champions. In the 1980s, we had Pascal and C. In the 1990s, Basic and C++. In the 2000s, Java and C#. In the 2010s we have Ruby and  Python. Why would the years to come be any different?

If history is anything to go by it seems inevitable that a new language will dominate the next decade. A new language will also need to solve problems that matter to this expanded world and that the existing languages will be slow to provide (or find impossible to provide).

Could that new language be Go?
